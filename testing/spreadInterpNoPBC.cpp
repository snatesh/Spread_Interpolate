#include<math.h>
#include<omp.h>
#include<iostream>
#include<iomanip>
#include<fstream>
#include"spread_interp.h"
#include"init.h"
#include"io.h"
#include"utils.h"
#include<gtest/gtest.h>

const char* xpf;
const char* flf;
const char* Fef;
const char* flinterpf;

class SpreadTest : public ::testing::Test 
{
  protected:
    void SetUp() override
    {
      xp = (double*) aligned_malloc(Np * 3 * sizeof(double));
      fl = (double*) aligned_malloc(Np * 3 * sizeof(double));
      flinterp = (double*) aligned_malloc(Np * 3 * sizeof(double));
      Fe = (double*) aligned_malloc(N * N * N * 3 * sizeof(double));
      firstn = (int*) aligned_malloc(N * N * sizeof(int));
      number = (unsigned int*) aligned_malloc(N * N * sizeof(unsigned int));
      nextn = (int*) aligned_malloc(Np * sizeof(int));
      
      Fe_test = (double*) aligned_malloc(N * N * N * 3 * sizeof(double));
      flinterp_test = (double*) aligned_malloc(Np * 3 * sizeof(double));
      for (unsigned int i = 0; i < N * N * N * 3; ++i) { Fe_test[i] = 0;}
      for (unsigned int i = 0; i < 3 * Np; ++i) { flinterp_test[i] = 0;}
      
      read_from_file(xp, xpf);
      read_from_file(fl, flf);
      read_from_file(Fe, Fef);
      read_from_file(flinterp, flinterpf);      
      
      init(Np, N, h, xp, firstn, nextn, number);
    }

    void TearDown() override 
    {
      aligned_free(xp);
      aligned_free(fl);
      aligned_free(flinterp);
      aligned_free(firstn);
      aligned_free(nextn);
      aligned_free(number);
      aligned_free(Fe);
      aligned_free(Fe_test);
      aligned_free(flinterp_test);
    }

    // same data for each test
    const unsigned int Np = 10;
    const unsigned short w = 6;
    const unsigned int N = w * ((int) 64 / w);
    const double h = 1;
    double* xp;
    double* Fe;
    double* fl;
    double* flinterp;
    int* firstn;
    int* nextn;
    unsigned int* number;
    // new data generated by tests
    double* flinterp_test;
    double* Fe_test;
};

TEST_F(SpreadTest, SpreadAndInterpNoPBC)
{

  // test spread by comparing Fe_test to Fe
  spread_interp(xp, fl, Fe_test, firstn, nextn, number, w, h, N, true);
  for (unsigned int i = 0; i < N * N * N * 3; ++i)
  {
    ASSERT_LT(fabs(Fe_test[i]-Fe[i]),1e-13)
      << "spread value differs at index " << i 
      << " by " << fabs(Fe_test[i]-Fe[i]); 
  } 

  // test interp by comparing flinterp_test to flinterp 
  spread_interp(xp, flinterp_test, Fe_test, firstn, nextn, number, w, h, N, false);
  for (unsigned int i = 0; i < 3 * Np; ++i)
  {
    ASSERT_LT(fabs(flinterp_test[i]-flinterp[i]),1e-13)
      << "interpolated value differs at index " << i
      << " by " << fabs(flinterp_test[i]-flinterp[i]);
  } 
}

int main(int argc, char** argv) 
{
  ::testing::InitGoogleTest(&argc, argv);
  assert(argc == 5);
  xpf = argv[1];
  flf = argv[2];
  Fef = argv[3];
  flinterpf = argv[4];
  return RUN_ALL_TESTS();
}
